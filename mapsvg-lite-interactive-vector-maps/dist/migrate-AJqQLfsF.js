import{A as e}from"./Mapsvg-CsxPvJnm.js";function t(e){return e.events&&(e.events.afterLoad=`function(event) {\n  const { map, data } = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events.afterLoad}).call(map, map)\n\n}`,e.events.beforeLoad=`function(event) {\n  const { map, data } = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events.beforeLoad}).call(map, map)\n}`,e.events.regionsLoaded&&(e.events["afterLoad.regions"]=`function(event) {\n  const { map, data } = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events.regionsLoaded}).call(map, map)\n}`),e.events["afterLoad.objects"]=`function(event) {\n  const { map, data } = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events.databaseLoaded}).call(map, map)\n}`,e.events.databaseLoaded=null,e.events["click.region"]=`function(event) {\n  const { map, domEvent, data: { region }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["click.region"]}).call(region, domEvent, region, map)\n}`,e.events["mouseover.region"]=`function(event) {\n  const { map, domEvent, data: { region }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["mouseover.region"]}).call(region, domEvent, region, map)\n}`,e.events["mouseout.region"]=`function(event) {\n  const { map, domEvent, data: { region }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["mouseout.region"]}).call(region, domEvent, region, map)\n}`,e.events["click.marker"]=`function(event) {\n  const { map, domEvent, data: { marker }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["click.marker"]}).call(marker, domEvent, marker, map)\n}`,e.events["mouseover.marker"]=`function(event) {\n  const { map, domEvent, data: { marker }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["mouseover.marker"]}).call(marker, domEvent, marker, map)\n}`,e.events["mouseout.marker"]=`function(event) {\n  const { map, domEvent, data: { marker }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["mouseout.marker"]}).call(marker, domEvent, marker, map)\n}`,e.events["click.directoryItem"]=`function(event) {\n  const { map, domEvent, data: { region, object, directoryItem }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["click.directoryItem"]}).call(directoryItem, domEvent, region || object, map)\n}`,e.events["mouseover.directoryItem"]=`function(event) {\n  const { map, domEvent, data: { region, object, directoryItem }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["mouseover.directoryItem"]}).call(directoryItem, domEvent, region || object, map)\n}`,e.events["mouseout.directoryItem"]=`function(event) {\n  const { map, domEvent, data: { region, object, directoryItem }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["mouseout.directoryItem"]}).call(directoryItem, domEvent, region || object, map)\n}`,e.events["afterShow.popover"]=`function(event) {\n  const { map, domEvent, data: { controller }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["shown.popover"]}).call(controller, map)\n}`,e.events["afterShow.detailsView"]=`function(event) {\n  const { map, domEvent, data: { controller }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["shown.detailsView"]}).call(controller, map)\n}`,e.events["afterClose.popover"]=`function(event) {\n  const { map, domEvent, data: { controller }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["closed.popover"]}).call(controller, map)\n}`,e.events["afterClose.detailsView"]=`function(event) {\n  const { map, domEvent, data: { controller }} = event\n\n  // This event handler was automatically modified to match the new event parameters format\n  ;(${e.events["closed.detailsView"]}).call(controller, map)\n}`),e.templates&&(e.templates.directory='{{#if categories}}\n  {{#each categories}}\n      {{>directoryCategoryItem}}\n  {{/each}}\n  {{else}}  \n  {{#each items}}\n      {{>directoryItem}}      \n  {{/each}}\n  {{#unless items.length}}\n      <div class="mapsvg-no-results">{{noResultsLabel}}</div>\n  {{/unless}}\n{{/if}}',e.templates.directoryItem=`<div id="mapsvg-directory-item-{{toSnakeCase id}}" class="mapsvg-directory-item" data-object-id="{{id}}">${e.templates.directoryItem}</div>`,e.templates.categoryItem='<div id="mapsvg-category-item-{{value}}" class="mapsvg-category-item" data-category-value="{{value}}">\n  <span class="mapsvg-category-label">{{label}}</span>\n  <span class="mapsvg-category-counter">{{counter}}</span>\n  <span class="mapsvg-chevron"></span>\n</div>\n<div class="mapsvg-category-block" data-category-id="{{value}}">\n  {{#each items}}\n    {{>directoryItem}}\n  {{/each}}  \n</div>'),e}function n(e){return e.events&&(e.events.afterInit=e.events.afterLoad||"",e.events.beforeInit=e.events.beforeLoad||"",e.events["beforeLoad.regions"]&&(e.events.afterLoadRegions=e.events["afterLoad.regions"],delete e.events["afterLoad.regions"]),e.events["afterLoad.objects"]&&(e.events.afterLoadObjects=e.events["afterLoad.objects"],delete e.events["afterLoad.objects"])),e}const a={v8_0_0:t,v8_1_0:n},o=e=>e.replace("_",".").replace("v",""),r=[];Object.keys(a).forEach((e=>{const t=o(e);r.push({version:t,handler:a[e]})}));const s=e=>JSON.parse(JSON.stringify(e)),m=()=>0===r.length?null:r.reduce(((t,n)=>e(n.version,t.version)>0?n:t)),i=(t,n)=>{const a=m();if(!a)return;const o=a.version,i=s(n);let c=i,v=t;const d=r.filter((t=>-1===e(v,t.version)));if(d.length>0)for(const e of d)try{c=e.handler(c),v=e.version}catch(e){return console.error(`Could not update options to version ${o} due to error:`,e),{options:i,version:t,success:!1}}return{options:c,version:v,success:!0}};export{i as migrate};
//# sourceMappingURL=migrate-AJqQLfsF.js.map
